import javax.swing.*;
import java.awt.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.util.*;

/** Programmation d'un jeu de Morpion avec une interface graphique Swing.
  *
  * REMARQUE : Dans cette solution, le patron MVC n'a pas √©t√© appliqu√© !
  * On a un mod√®le (?), une vue et un contr√¥leur qui sont fortement li√©s.
  *
  * @author	Xavier Cr√©gut
  * @version	$Revision: 1.4 $
  */

public class MorpionSwing {

	// les images √† utiliser en fonction de l'√©tat du jeu.
	private static final Map<ModeleMorpion.Etat, ImageIcon> images
		= new HashMap<ModeleMorpion.Etat, ImageIcon>();
	static {
		images.put(ModeleMorpion.Etat.VIDE, new ImageIcon("blanc.jpg"));
		images.put(ModeleMorpion.Etat.CROIX, new ImageIcon("croix.jpg"));
		images.put(ModeleMorpion.Etat.ROND, new ImageIcon("rond.jpg"));
	}

// Choix de r√©alisation :
// ----------------------
//
//  Les attributs correspondant √† la structure fixe de l'IHM sont d√©finis
//	¬´ final static ¬ª pour montrer que leur valeur ne pourra pas changer au
//	cours de l'ex√©cution.  Ils sont donc initialis√©s sans attendre
//  l'ex√©cution du constructeur !

	private ModeleMorpion modele;	// le mod√®le du jeu de Morpion

//  Les √©l√©ments de la vue (IHM)
//  ----------------------------

	/** Fen√™tre principale */
	private JFrame fenetre;

	/** Bouton pour quitter */
	private final JButton boutonQuitter = new JButton("Q");

	/** Bouton pour commencer une nouvelle partie */
	private final JButton boutonNouvellePartie = new JButton("N");

	/** Cases du jeu */
	private final JLabel[][] cases = new JLabel[3][3];

	/** Zone qui indique le joueur qui doit jouer */
	private final JLabel joueur = new JLabel();


// Le constructeur
// ---------------

	/** Construire le jeu de morpion */
	public MorpionSwing() {
		this(new ModeleMorpionSimple());
	}

	/** Construire le jeu de morpion */
	public MorpionSwing(ModeleMorpion modele) {
		// Initialiser le mod√®le
		this.modele = modele;

		// Cr√©er les cases du Morpion
		for (int i = 0; i < this.cases.length; i++) {
			for (int j = 0; j < this.cases[i].length; j++) {
				this.cases[i][j] = new JLabel();
			}
		}

		// Initialiser le jeu
		this.recommencer();

		// Construire la vue (pr√©sentation)
		//	D√©finir la fen√™tre principale
		this.fenetre = new JFrame("Morpion");
		this.fenetre.setLocation(100, 200); // emplacement de la fenÍtre
		
		java.awt.Container contenu = this.fenetre.getContentPane(); // contenu de la fen√™tre principale
		contenu.setLayout(new GridLayout(4,3));
		
		// D√©finir la position des 9 JLabel des cases
		for (int i = 0; i < this.cases.length; i++) {
			for (int j = 0; j < this.cases[i].length; j++) {
				contenu.add(this.cases[i][j]);
			}
		}
		
		// Placer les JButton des boutons NouvellePartie et Quitter
		contenu.add(boutonNouvellePartie);
		contenu.add(joueur);
		contenu.add(boutonQuitter);
		

		// Construire le contr√¥leur (gestion des √©v√©nements)
		this.fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		boutonNouvellePartie.addActionListener(new ActionNouvellePartie());
		boutonQuitter.addActionListener(new ActionQuitter());
		
		for (int i = 0; i < this.cases.length; i++) {
			for (int j = 0; j < this.cases[i].length; j++) {
//			    cliquerCase clique = new cliquerCase();
//			    clique.uneCase = cases[i][j];
//				cases[i][j].addMouseListener(clique);
				this.cases[i][j].addMouseListener((MouseEvent) ev -> {
					this.cases[i][j].setIcon(images.get(modele.getJoueur()));
				});
			}
			
		}

		// afficher la fen√™tre
		this.fenetre.pack();			// redimmensionner la fen√™tre
		this.fenetre.setVisible(true);	// l'afficher
	}
// Les getters utiles
		
		/** Obtenir le JLabel correspondant au joueur.
		 * 
		 * @return joueur le JLabel correspondant au joueur
		 */
		public JLabel getJoueur() {
			return this.joueur;
			
		}
		
		/** Obtenir les cases.
		 * @return cases les cases du jeu
		 */
		public JLabel[][] getCase() {
			return this.cases;
		}
		
		/** Obtenir images.
		 * @return images 
		 */
		public Map<ModeleMorpion.Etat, ImageIcon> getImages() {
			return this.images;
		}
// Quelques r√©actions aux interactions de l'utilisateur
// ----------------------------------------------------

	/** Recommencer une nouvelle partie. */
	public void recommencer() {
		this.modele.recommencer();

		// Vider les cases
		for (int k = 0; k < this.cases.length; k++) {
			for (int l = 0; l < this.cases[k].length; l++) {
				this.cases[k][l].setIcon(images.get(this.modele.getValeur(k, l)));
			}
		}

		// Mettre √† jour le joueur
		joueur.setIcon(images.get(modele.getJoueur()));
	}

// Le listener pour toutes les rÈactions
	public void actionPerformed(ActionEvent ev) {
		if (ev.getSource() == boutonQuitter) {
//			JOptionPane finPartie = new JOptionPane("La partie est terminÈe!");
//			System.out.println(JOptionPane.showMessageDialog(this.fenetre, finPartie.getMessage()));
			System.exit(1);
		} else if (ev.getSource()== boutonNouvellePartie) {
			this.recommencer();
		}
	}

	public void actionCliquer(MouseEvent ev) {
		
	}
// La m√©thode principale
// ---------------------

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MorpionSwing();
			}
		});
	}

}
